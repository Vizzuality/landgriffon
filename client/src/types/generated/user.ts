/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * LandGriffon API
 * LandGriffon is a conservation planning platform.
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  CreateUserDTO,
  RecoverPasswordDto,
  ResetPasswordDto,
  UpdateOwnUserDTO,
  UpdateUserDTO,
  UpdateUserPasswordDTO,
  User,
  UserResult,
  UsersControllerFindAllParams,
} from './api.schemas';
import { API } from '../../services/orval';
import type { ErrorType, BodyType } from '../../services/orval';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Find all users
 */
export const usersControllerFindAll = (
  params?: UsersControllerFindAllParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<User>({ url: `/api/v1/users`, method: 'GET', params, signal }, options);
};

export const getUsersControllerFindAllQueryKey = (params?: UsersControllerFindAllParams) => {
  return [`/api/v1/users`, ...(params ? [params] : [])] as const;
};

export const getUsersControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<void>,
>(
  params?: UsersControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindAll>>> = ({ signal }) =>
    usersControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type UsersControllerFindAllQueryError = ErrorType<void>;

export const useUsersControllerFindAll = <
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = ErrorType<void>,
>(
  params?: UsersControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create new user
 */
export const usersControllerCreateUser = (
  createUserDTO: BodyType<CreateUserDTO>,
  options?: SecondParameter<typeof API>,
) => {
  return API<User | void>(
    {
      url: `/api/v1/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserDTO,
    },
    options,
  );
};

export const getUsersControllerCreateUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreateUser>>,
    TError,
    { data: BodyType<CreateUserDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerCreateUser>>,
  TError,
  { data: BodyType<CreateUserDTO> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerCreateUser>>,
    { data: BodyType<CreateUserDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerCreateUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerCreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerCreateUser>>
>;
export type UsersControllerCreateUserMutationBody = BodyType<CreateUserDTO>;
export type UsersControllerCreateUserMutationError = ErrorType<unknown>;

export const useUsersControllerCreateUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerCreateUser>>,
    TError,
    { data: BodyType<CreateUserDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerCreateUser>>,
  TError,
  { data: BodyType<CreateUserDTO> },
  TContext
> => {
  const mutationOptions = getUsersControllerCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update the password of a user, if they can present the current one.
 */
export const usersControllerUpdateOwnPassword = (
  updateUserPasswordDTO: BodyType<UpdateUserPasswordDTO>,
  options?: SecondParameter<typeof API>,
) => {
  return API<UserResult>(
    {
      url: `/api/v1/users/me/password`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserPasswordDTO,
    },
    options,
  );
};

export const getUsersControllerUpdateOwnPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateOwnPassword>>,
    TError,
    { data: BodyType<UpdateUserPasswordDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdateOwnPassword>>,
  TError,
  { data: BodyType<UpdateUserPasswordDTO> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdateOwnPassword>>,
    { data: BodyType<UpdateUserPasswordDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerUpdateOwnPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateOwnPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateOwnPassword>>
>;
export type UsersControllerUpdateOwnPasswordMutationBody = BodyType<UpdateUserPasswordDTO>;
export type UsersControllerUpdateOwnPasswordMutationError = ErrorType<unknown>;

export const useUsersControllerUpdateOwnPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateOwnPassword>>,
    TError,
    { data: BodyType<UpdateUserPasswordDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdateOwnPassword>>,
  TError,
  { data: BodyType<UpdateUserPasswordDTO> },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateOwnPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update own user.
 */
export const usersControllerUpdate = (
  updateOwnUserDTO: BodyType<UpdateOwnUserDTO>,
  options?: SecondParameter<typeof API>,
) => {
  return API<UserResult>(
    {
      url: `/api/v1/users/me`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateOwnUserDTO,
    },
    options,
  );
};

export const getUsersControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { data: BodyType<UpdateOwnUserDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdate>>,
  TError,
  { data: BodyType<UpdateOwnUserDTO> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    { data: BodyType<UpdateOwnUserDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerUpdateMutationBody = BodyType<UpdateOwnUserDTO>;
export type UsersControllerUpdateMutationError = ErrorType<unknown>;

export const useUsersControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdate>>,
    TError,
    { data: BodyType<UpdateOwnUserDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdate>>,
  TError,
  { data: BodyType<UpdateOwnUserDTO> },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve attributes of the current user
 */
export const usersControllerUserMetadata = (
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<UserResult>({ url: `/api/v1/users/me`, method: 'GET', signal }, options);
};

export const getUsersControllerUserMetadataQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getUsersControllerUserMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerUserMetadata>>,
  TError = ErrorType<void | UserResult>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserMetadata>>, TError, TData>;
  request?: SecondParameter<typeof API>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerUserMetadataQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerUserMetadata>>> = ({
    signal,
  }) => usersControllerUserMetadata(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerUserMetadata>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerUserMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUserMetadata>>
>;
export type UsersControllerUserMetadataQueryError = ErrorType<void | UserResult>;

export const useUsersControllerUserMetadata = <
  TData = Awaited<ReturnType<typeof usersControllerUserMetadata>>,
  TError = ErrorType<void | UserResult>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserMetadata>>, TError, TData>;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersControllerUserMetadataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Mark user as deleted.
 */
export const usersControllerDeleteOwnUser = (options?: SecondParameter<typeof API>) => {
  return API<void>({ url: `/api/v1/users/me`, method: 'DELETE' }, options);
};

export const getUsersControllerDeleteOwnUserMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerDeleteOwnUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerDeleteOwnUser>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerDeleteOwnUser>>,
    void
  > = () => {
    return usersControllerDeleteOwnUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerDeleteOwnUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeleteOwnUser>>
>;

export type UsersControllerDeleteOwnUserMutationError = ErrorType<void>;

export const useUsersControllerDeleteOwnUser = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerDeleteOwnUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerDeleteOwnUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getUsersControllerDeleteOwnUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Recover password presenting a valid user email
 */
export const usersControllerRecoverPassword = (
  recoverPasswordDto: BodyType<RecoverPasswordDto>,
  options?: SecondParameter<typeof API>,
) => {
  return API<void>(
    {
      url: `/api/v1/users/me/password/recover`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: recoverPasswordDto,
    },
    options,
  );
};

export const getUsersControllerRecoverPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRecoverPassword>>,
    TError,
    { data: BodyType<RecoverPasswordDto> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerRecoverPassword>>,
  TError,
  { data: BodyType<RecoverPasswordDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerRecoverPassword>>,
    { data: BodyType<RecoverPasswordDto> }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerRecoverPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerRecoverPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRecoverPassword>>
>;
export type UsersControllerRecoverPasswordMutationBody = BodyType<RecoverPasswordDto>;
export type UsersControllerRecoverPasswordMutationError = ErrorType<unknown>;

export const useUsersControllerRecoverPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerRecoverPassword>>,
    TError,
    { data: BodyType<RecoverPasswordDto> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerRecoverPassword>>,
  TError,
  { data: BodyType<RecoverPasswordDto> },
  TContext
> => {
  const mutationOptions = getUsersControllerRecoverPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Reset a user password presenting a valid token
 */
export const usersControllerResetPassword = (
  resetPasswordDto: BodyType<ResetPasswordDto>,
  options?: SecondParameter<typeof API>,
) => {
  return API<void>(
    {
      url: `/api/v1/users/me/password/reset`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: resetPasswordDto,
    },
    options,
  );
};

export const getUsersControllerResetPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerResetPassword>>,
    TError,
    { data: BodyType<ResetPasswordDto> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerResetPassword>>,
  TError,
  { data: BodyType<ResetPasswordDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerResetPassword>>,
    { data: BodyType<ResetPasswordDto> }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerResetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerResetPassword>>
>;
export type UsersControllerResetPasswordMutationBody = BodyType<ResetPasswordDto>;
export type UsersControllerResetPasswordMutationError = ErrorType<unknown>;

export const useUsersControllerResetPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerResetPassword>>,
    TError,
    { data: BodyType<ResetPasswordDto> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerResetPassword>>,
  TError,
  { data: BodyType<ResetPasswordDto> },
  TContext
> => {
  const mutationOptions = getUsersControllerResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update a user as admin
 */
export const usersControllerUpdateUser = (
  id: string,
  updateUserDTO: BodyType<UpdateUserDTO>,
  options?: SecondParameter<typeof API>,
) => {
  return API<User | void>(
    {
      url: `/api/v1/users/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserDTO,
    },
    options,
  );
};

export const getUsersControllerUpdateUserMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateUser>>,
    TError,
    { id: string; data: BodyType<UpdateUserDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdateUser>>,
  TError,
  { id: string; data: BodyType<UpdateUserDTO> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdateUser>>,
    { id: string; data: BodyType<UpdateUserDTO> }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersControllerUpdateUser(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateUser>>
>;
export type UsersControllerUpdateUserMutationBody = BodyType<UpdateUserDTO>;
export type UsersControllerUpdateUserMutationError = ErrorType<void>;

export const useUsersControllerUpdateUser = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateUser>>,
    TError,
    { id: string; data: BodyType<UpdateUserDTO> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdateUser>>,
  TError,
  { id: string; data: BodyType<UpdateUserDTO> },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a user. This operation will destroy any resource related to the user and it will be irreversible
 */
export const usersControllerDeleteUser = (
  userId: string,
  options?: SecondParameter<typeof API>,
) => {
  return API<void>({ url: `/api/v1/users/${userId}`, method: 'DELETE' }, options);
};

export const getUsersControllerDeleteUserMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerDeleteUser>>,
    TError,
    { userId: string },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerDeleteUser>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {};

    return usersControllerDeleteUser(userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerDeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>
>;

export type UsersControllerDeleteUserMutationError = ErrorType<void>;

export const useUsersControllerDeleteUser = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerDeleteUser>>,
    TError,
    { userId: string },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getUsersControllerDeleteUserMutationOptions(options);

  return useMutation(mutationOptions);
};
